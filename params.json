{"name":"Cf-mysql-node-broker","tagline":"A Node.js version of MySQL Service Broker for Cloud Foundry","body":"A Node.js version of MySQL Service Broker for Cloud Foundry\r\n===================\r\n\r\nOverview\r\n-------------\r\n\r\nThis is a Node.js version of MySQL Service Broker for Cloud Foundry which can be deployed as a Node.js application to Cloud Foundry or anywhere the node.js framework works.\r\n\r\nThe specification complies with the [Service Broker API v2](http://docs.cloudfoundry.org/services/api.html). Some other official documents of Cloud Foundry - [Managing Service Brokers](http://docs.cloudfoundry.org/services/managing-service-brokers.html#make-plans-public) & [Access Control](http://docs.cloudfoundry.org/services/access-control.html) - were also be referenced.\r\n\r\nAppreciate the original Java example which can be found [here](https://github.com/cloudfoundry-community/cf-mysql-java-broker).\r\n\r\n----------\r\nWhy creating an example with Node.js for a MySQL Service Broker?\r\n-------------\r\n 1. Already a lot of Service Broker examples in Java and Ruby - some people might be looking for something different. Hope this one can be used as a template for beginners like myself.\r\n 2. MySQL Community Edition can be easily found and installed on Windows, Mac OS X or Linux and monitored with a good GUI admin tool called MySQL Workbench - easy for local environment test.\r\n 3. Trust Microservices in Node.js fits this kind of task better.\r\n 4. I am a database engineer without too much javascript experience and happen to notice that Node.js is so powerful and make applications and services easy to compose.\r\n\r\n----------\r\nArchitecture\r\n-------------\r\n###Cloud Foundry Service Broker API v2\r\nThe broker can be deployed to any place where both sides - Cloud Foundry and MySQL Server - can be reached.\r\n![3-tier](http://docs.cloudfoundry.org/services/images/v2services-new.png)\r\n\r\n----------\r\nLocal Environment Test\r\n-------------\r\n\r\nStarting with a local MySQL server. Go to http://dev.mysql.com/downloads/mysql/ and download and install the proper release for your OS. \r\n\r\nI also prefer to use [MySQL Workbench](http://dev.mysql.com/downloads/workbench/) for GUI management but it is optional.\r\n\r\nClone this repository.\r\n```\r\ngit clone https://github.com/komushi/cf-mysql-node-broker\r\ncd cf-mysql-node-broker\r\n```\r\n\r\nOpen cf-mysql-node-broker/server/app.js and **uncomment** the following lines. Hope they match your **default** settings.\r\n\r\n    // process.env['host'] = \"localhost\";\r\n    // process.env['port'] = \"3306\";\r\n    // process.env['user'] = \"root\";\r\n    // process.env['password'] = \"\";\r\n\r\nRemeber to install [node.js and npm](http://nodejs.org/) first. Then, install the dependencies:\r\n```\r\nnpm install\r\n```\r\n\r\nThen, run the Application:\r\n```\r\nnpm start\r\n```\r\n\r\nYou should be able access your app at with test/test as credentials. I just decided to use the basic authentication to make the code simple.\r\n```\r\nhttp://localhost:9000/v2/\r\n```\r\n\r\nLet's test the Microservices now.\r\n\r\n```\r\ncurl -i -X GET http://test:test@localhost:9000/v2/catalog\r\n```\r\n\r\n> HTTP/1.1 200 OK\r\nX-Powered-By: Express\r\naccess-control-allow-origin: *\r\naccess-control-allow-methods: GET,PUT,POST,DELETE,OPTIONS\r\naccess-control-allow-headers: Content-Type, Authorization, Content-Length, X-Requested-With\r\ncontent-type: application/json\r\ncontent-length: 85107\r\nDate: Fri, 20 Feb 2015 09:40:55 GMT\r\nConnection: keep-alive\r\n> \r\n{\"services\":[{\"name\":\"mac-mysql\",\"id\":\"3101b971-1044-4816-a7ac-9ded2e028079\",\"description\":\"MySQL service for application development and testing\",\"bindable\":true,\"tags\":[\"mysql\",\"relational\"],\"max_db_per_node\":250,\"metadata\":{\"displayName\":\"MySQL On Mac\".....\r\n\r\n```\r\ncurl -i -X PUT http://test:test@localhost:9000/v2/service_instances/myinstance\r\n```\r\n\r\n> HTTP/1.1 200 OK X-Powered-By: Express access-control-allow-origin: *\r\n> access-control-allow-methods: GET,PUT,POST,DELETE,OPTIONS\r\n> access-control-allow-headers: Content-Type, Authorization,\r\n> Content-Length, X-Requested-With content-type: application/json\r\n> content-length: 2 Date: Fri, 20 Feb 2015 09:47:14 GMT Connection:\r\n> keep-alive\r\n> \r\n> {}\r\n\r\nCheck your MySQL server, now you should have a MySQL schema called **myinstance**.\r\n\r\n```\r\ncurl -i http://test:test@localhost:9000/v2/service_instances/myinstance/service_bindings/mybindingid -d '{\r\n\"plan_id\": \"plan-guid-here\",\r\n\"service_id\": \"service-guid-here\",\r\n\"app_guid\": \"app-guid-here\"\r\n}' -X PUT\r\n```\r\n\r\n> HTTP/1.1 200 OK X-Powered-By: Express access-control-allow-origin: *\r\n> access-control-allow-methods: GET,PUT,POST,DELETE,OPTIONS\r\n> access-control-allow-headers: Content-Type, Authorization,\r\n> Content-Length, X-Requested-With content-type: application/json\r\n> content-length: 210 Date: Fri, 20 Feb 2015 09:49:55 GMT Connection:\r\n> keep-alive\r\n> \r\n> {\"credentials\":{\"uri\":\"mysql://0fd7c4b7475c3cbd:d235440f6be97030@localhost:3306/myinstance\",\"username\":\"0fd7c4b7475c3cbd\",\"password\":\"d235440f6be97030\",\"host\":\"localhost\",\"port\":\"3306\",\"database\":\"myinstance\"}}\r\n\r\nCheck your MySQL server, now you should have a user which has privileges of the schema **myinstance**. Remember the user name is generated by the binding id named **mybindingid**.\r\n\r\n```\r\ncurl -i 'http://test:test@localhost:9000/v2/service_instances/myinstance/service_bindings/mybindingid?service_id=service-id-here&plan_id=plan-id-here' -X DELETE\r\n```\r\n\r\n> HTTP/1.1 200 OK X-Powered-By: Express access-control-allow-origin: *\r\n> access-control-allow-methods: GET,PUT,POST,DELETE,OPTIONS\r\n> access-control-allow-headers: Content-Type, Authorization,\r\n> Content-Length, X-Requested-With content-type: application/json\r\n> content-length: 2 Date: Fri, 20 Feb 2015 09:55:49 GMT Connection:\r\n> keep-alive\r\n> \r\n> {}\r\n\r\nCheck your MySQL server, the user is gone.\r\n\r\n```\r\ncurl -i -X DELETE http://test:test@localhost:9000/v2/service_instances/myinstance\r\n```\r\n\r\n> HTTP/1.1 200 OK X-Powered-By: Express access-control-allow-origin: *\r\n> access-control-allow-methods: GET,PUT,POST,DELETE,OPTIONS\r\n> access-control-allow-headers: Content-Type, Authorization,\r\n> Content-Length, X-Requested-With content-type: application/json\r\n> content-length: 2 Date: Fri, 20 Feb 2015 09:58:57 GMT Connection:\r\n> keep-alive\r\n> \r\n> {}\r\n\r\nThis time the schema **myinstance** is also gone.\r\n\r\n----------\r\nDeployment to Cloud Foundry\r\n-------------\r\nIf you are confident enough about this example you can skip the local test and deploy it to a web server which supports Node.js.\r\n\r\nClone this repository,\r\n```\r\ngit clone https://github.com/komushi/cf-mysql-node-broker\r\ncd cf-mysql-node-broker\r\n```\r\n\r\nRemember to install [cf cli](https://github.com/cloudfoundry/cli/releases) first. Then, push the application:\r\n```\r\ncf push\r\n```\r\n\r\nYou can access your app at test/test as credentials.\r\n```\r\nhttp://cf-mysql-node-broker.<your-cf-app-domain>/v2\r\n```\r\n\r\nCreate Service Broker with admin access.\r\n```\r\ncf create-service-broker mysqlbroker test test http://cf-mysql-node-broker.<your-cf-app-domain>\r\n```\r\nMake the service available to all the organizations.\r\n```\r\ncf enable-service-access mac-mysql\r\n```\r\n\r\nSet MySQL credentials as environment variables to the broker application.\r\n```\r\ncf set-env cf-mysql-node-broker host yourmysqlhost\r\ncf set-env cf-mysql-node-broker port yourmysqlport\r\ncf set-env cf-mysql-node-broker user 3306\r\ncf set-env cf-mysql-node-broker password rootpassword\r\n```\r\n\r\nRestart the broker application to enable those environment variables.\r\n```\r\ncf restart cf-mysql-node-broker\r\n```\r\n\r\nYou are now able to create MySQL schema and bind users to your applications.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}